QUERIES MongoDB:


mongodb://localhost:27017/


-Use restaurants


1-Write a query to display all documents in the Restaurants collection.


db.restaurants.find().pretty();


2-Write a query to display the restaurant_id, name, borough, and cuisine for all documents in the Restaurants collection.


db.restaurants.find({}, {restaurant_id: 1, name: 1, borough: 1, cuisine: 1}).pretty();


3-Write a query to display the restaurant_id, name, borough, and cuisine, but exclude the _id field, for all documents in the Restaurants collection.


db.restaurants.find({}, {_id: 0, restaurant_id: 1, name: 1, borough: 1, cuisine: 1}).pretty();


4-Write a query to display the restaurant_id, name, borough, and zip code, but exclude the _id field, for all documents in the Restaurants collection.


db.restaurants.find({},{"restaurant_id":1, "name":1, "borough":1, "cuisine":1, "address.zipcode":1, "_id":0});


5-Write a query to display all restaurants that are in the Bronx.


db.restaurants.find({borough: "Bronx"}).pretty();


6-Write a query to display the first 5 restaurants that are in the Bronx.


db.restaurants.find({borough: "Bronx"}).limit(5).pretty();


7-Write a query to display the next 5 restaurants after skipping the first 5 in the Bronx.


db.restaurants.find({borough: "Bronx"}).skip(5).limit(5).pretty();


8-Write a query to find restaurants that have a score greater than 90.


db.restaurants.find({"grades.score": {$gt: 90}}).pretty();


9-Write a query to find restaurants that have a score greater than 80 but less than 100.


db.restaurants.find({"grades.score": {$gt: 80, $lt: 100}}).pretty();


10-Write a query to find restaurants that are located in latitude value less than -95.754168.
db.restaurants.find({"address.coord.0": {$lt: -95.754168}}).pretty();


11-Write a MongoDB query to find restaurants that do not prepare any 'American' cuisine and their rating is greater than 70 and longitude less than -65.754168.


db.restaurants.find({$and: [{"cuisine": {$not: {$eq: "American "}}}, {"grades.score": {$gt: 70}}, {"address.coord.0": {$lt: -65.754168}}]}).pretty();


12-Write a query to find restaurants that do not prepare any 'American' cuisine and got a score greater than 70 and located in longitude less than -65.754168. Note: Do this query without using $and operator.


db.restaurants.find({cuisine: {$not: {$eq: "American "}}, "grades.score": {$gt: 70}, "address.coord.0": {$lt: -65.754168}}).pretty();


13-Write a query to find restaurants that do not prepare any 'American' cuisine and got a grade point 'A' does not belong to Brooklyn. The document should be displayed according to the cuisine in descending order.


db.restaurants.find({cuisine: {$ne: "American "}, "grades.grade": "A", borough: {$ne: "Brooklyn"}}).sort({cuisine: -1}).pretty();


14-Write a query to find the restaurant_id, name, borough and cuisine for those restaurants that contain 'Wil' as the first three letters in their name.


db.restaurants.find({name: {$regex: /^Wil/}}, {_id: 0, restaurant_id: 1, name: 1, borough: 1, cuisine: 1}).pretty();


15-Write a query to find the restaurant_id, name, borough and cuisine for those restaurants that contain 'ces' as the last three letters in their name.


db.restaurants.find({name: {$regex: /ces$/}}, {_id: 0, restaurant_id: 1, name: 1, borough: 1, cuisine: 1}).pretty();


16-Write a query to find the restaurant_id, name, borough and cuisine for those restaurants that contain 'Reg' as three letters anywhere in their name.


db.restaurants.find({name: {$regex: /Reg/}}, {_id: 0, restaurant_id: 1, name: 1, borough: 1, cuisine: 1}).pretty();


17-Write a query to find the restaurants that belong to the Bronx and prepared any American or Chinese dish.


db.restaurants.find({borough: "Bronx", cuisine: {$in: ["American ", "Chinese"]}}).pretty();


18-Write a query to find the restaurant_id, name, borough and cuisine for those restaurants that belong to Staten Island or Queens or Bronx or Brooklyn.


db.restaurants.find({borough: {$in: ["Staten Island", "Queens", "Bronx", "Brooklyn"]}}, {_id: 0, restaurant_id: 1, name: 1, borough: 1, cuisine: 1}).pretty();


19-Write a query to find the restaurant_id, name, borough, and cuisine for those restaurants that do not belong to Staten Island or Queens or Bronx or Brooklyn.


db.restaurants.find({borough: {$nin: ["Staten Island", "Queens", "Bronx", "Brooklyn"]}}, {_id: 0, restaurant_id: 1, name: 1, borough: 1, cuisine: 1}).pretty();


20-Write a query to find the restaurant_id, name, borough, and cuisine for those restaurants that get a score that is not more than 10.


db.restaurants.find({"grades.score": {$not: {$gt: 10}}}, {_id: 0, restaurant_id: 1, name: 1, borough: 1, cuisine: 1}).pretty();


21-Write a query to find the restaurant_id, name, borough, and cuisine for those restaurants that prepare fish except 'American' and 'Chinese' or the restaurant name starts with the letters 'Wil'.


db.restaurants.find({$or: [{cuisine: {$ne: "American "}}, {cuisine: {$ne: "Chinese"}}, {name: {$regex: /^Wil/}}]}, {_id: 0, restaurant_id: 1, name: 1, borough: 1, cuisine: 1}).pretty();


22-Write a query to find the restaurant_id, name, and grades for those restaurants that get a grade "A" and a score 11 in study data ISODate "2014-08-11T00:00:00Z".


db.restaurants.find({"grades": {$elemMatch: {grade: "A", score: 11, date: ISODate("2014-08-11T00:00:00Z")}}}, {_id: 0, restaurant_id: 1, name: 1, grades: 1}).pretty();


23-Write a query to find the restaurant_id, name and grades for those restaurants where the 2nd element of the grade array contains a grade of "A" and marker 9 on an ISODate "2014-08-11T00:00:00Z".


db.restaurants.find({"grades.1.grade": "A", "grades.1.score": 9, "grades.1.date": ISODate("2014-08-11T00:00:00Z")}, {_id: 0, restaurant_id: 1, name: 1, grades: 1}).pretty();


24-Write a query to find the restaurant_id, name, address and geographic location for those restaurants where the second element of the array coord contains a value that is greater than 42 and up to 52.


db.restaurants.find({"address.coord.1": {$gt: 42, $lt: 53}}, {_id: 0, restaurant_id: 1, name: 1, "address.building": 1, "address.street": 1, "address.zipcode": 1, "address.coord": 1}).pretty();


25-Write a query to organize the restaurant name in ascending order along with all columns.


db.restaurants.find().sort({name: 1}).pretty();


26-Write a query to organize the restaurant name in descending order along with all columns.


db.restaurants.find().sort({name: -1}).pretty();


27-Write a query to organize the cuisine name in ascending order and by the same cuisine neighborhood. Descending order.


db.restaurants.find().sort({cuisine: 1, borough: -1}).pretty();


28-Write a query to find all addresses that do not contain the street.


db.restaurants.find({"address.street": {$exists: false}}, {_id: 0, "address": 1}).pretty();


29-Write a query that will select all documents in the restaurants collection where the value of the coord field is Double.


db.restaurants.find({"address.coord": {$type: "double"}}).pretty();


30-Write a query that will select the restaurant_id, name, and grade for those restaurants that return 0 as a remainder after dividing the score by 7.


db.restaurants.find({$expr: {$eq: [{$mod: [{$arrayElemAt: ["$grades.score", 0]}, 7]}, 0]}}, {_id: 0, restaurant_id: 1, name: 1, grades: 1}).pretty();


31-Write a query to find the restaurant name, borough, longitude, and altitude, and cuisine for those restaurants that contain 'mon' as three letters somewhere in their name.


db.restaurants.find({name: {$regex: /mon/i}}, {_id: 0, name: 1, borough: 1, "address.coord": 1, cuisine: 1}).pretty();


32-Write a query to find the restaurant name, borough, longitude, and latitude, and cuisine for those restaurants that contain 'Mad' as the first three letters of their name.


db.restaurants.find({name: {$regex: /^Mad/i}}, {_id: 0, name: 1, borough: 1, "address.coord": 1, cuisine: 1}).pretty();